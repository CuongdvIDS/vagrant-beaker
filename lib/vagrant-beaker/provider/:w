module VagrantPlugins
  module Beaker
    module Provider
      module VSphereActions
        class CloneTemplate
          def initialize( app, env )
            @app = app
            @logger = Log4r::Logger.new( 'vagrant_plugins::beaker::provider::vsphere_actions::clone_template' )
          end

          def call( env )

            ui         = env[:machine].ui
            config     = env[:machine].provider_config

            vsphere    = env[:vsphere][:connection]
            connection = vsphere.instance_variable_get :@connection
            datacenter = connection.serviceInstance.find_datacenter

            ui.info 'Validating existence of Resource Pool: ' + config.target_resource_pool
            ui.info 'Validating existence of Datastore: '     + config.target_datastore
            ui.info 'Validating existence of Target Folder: ' + config.target_folder
            ui.info 'Validating existence of Template: '      + config.template

            resource_pool = vsphere.find_pool( config.target_resource_pool )
            datastore     = vsphere.find_datastore( config.target_datastore )
            target_folder = vsphere.find_folder( config.target_folder )
            template      = datacenter.find_vm( config.template )

            username = real_username( config.username )

            vmname = vmname_for( config.target_folder, username )
            vmpath = [config.target_folder, vmname].join( '/' )

            while datacenter.find_vm( vmpath )
              vmname = vmname_for( config.target_folder, username )
              vmpath = [config.target_folder, vmname].join( '/' )
            end

            ui.info 'Provisioning vm at: ' + vmpath
            ui.info 'Cloning VM'
            ui.report_progress 0, 100

            task = clone( vsphere:       vsphere,
                          connection:    connection,
                          resource_pool: resource_pool,
                          datastore:     datastore,
                          folder:        target_folder,
                          template:      template,
                          name:          vmname         )

            wait_for task, connection, ui

            vm = datacenter.find_vm( config.target_folder + '/' + vmname )

            metadata = {
              'machine_name' =>  vmname,
              'state'        => 'deployed-off',
              'mo_ref'       =>  vm._ref,
              'vagrant_ref'  =>  env[:root_path].to_s + '/Vagrantfile/' + env[:machine].name.to_s,
              'id'           =>  vm.config.instanceUuid,
              'created_on'   =>  Time.now.getutc,
              'created_by'   =>  config.username
            }

            vm.ReconfigVM_Task( spec: { annotation: metadata.to_json })

            metadata_file = File.join( env[:machine].data_dir.to_s, 'metadata.json' )
            File.open( metadata_file, 'w+' ) {|f| f.write( metadata.to_json ) }

            env[:vsphere][:metadata] = metadata

            ui.clear_line
            ui.report_progress 100, 100
            ui.info "\nCompleted clone"


            @app.call( env )
          end

          def vmpath_for( target_folder, username )
            random = rand( 100...1000 )
            vmname = username + '-' + random.to_s

          end

          def real_username( username )
            username_without_dn = username.split('@')[0]

            if username_without_dn =~ /\./
              first_name, last_name = username_without_dn.split('.')
              user = first_name[0..10] + last_name[0..1]
            else
              user = username_without_dn[0..11]
            end

            user
          end

          # I'm pretty sure we shouldn't have to pass all of these....
          # clone( vsphere:       vsphere,
          #        connection:    connection,
          #        resource_pool: resource_pool,
          #        datastore:     datastore,
          #        folder: target_folder,
          #        template:      template,
          #        name:          vmname          )
          def clone( args )
            template = args[:connection].serviceInstance.find_datacenter.find_vm( config.template )

            relocate_spec = RbVmomi::VIM.VirtualMachineRelocateSpec(
              datastore:     args[:resource_pool],
              pool:          args[:datastore],
              diskMoveType: :moveChildMostDiskBacking
            )

            custom_spec = args[:vsphere].find_customization( args[:template] )

            spec = RbVmomi::VIM.VirtualMachineCloneSpec(
              config:        {},
              location:      relocate_spec,
              customization: custom_spec,
              powerOn:       false,
              template:      false
            )

            clone_task = args[:template].CloneVM_Task( name:   args[:name],
                                                       spec:   spec,
                                                       folder: args[:folder] )

            return clone_task
          end

          def wait_for task, connection, ui
            filter = connection.propertyCollector.CreateFilter(
              spec: {
                propSet: [{
                           type:      'Task',
                           all:        false,
                           pathSet: [ 'info.state',
                                      'info.progress' ]
                         }],
                objectSet: [{ obj: task }]
              },
              partialUpdates: false
            )

            # yeah, it's a really long name, but not as long as it took my
            # simple brain to figure out what the hell it was
            last_point_in_update_stream = ''
            polling = true

            # block until our tasks have succeeded or errored
            loop do
              result = connection.propertyCollector.WaitForUpdates(
                :version => last_point_in_update_stream
              )

              last_point_in_update_stream = result.version

              if ['success', 'error'].member? task.info.state
                break
              else
                ui.clear_line
                ui.report_progress task.info.progress, 100
              end
            end

            filter.DestroyPropertyFilter

            # fail if we weren't successful
            raise 'Failed to clone VM' if task.info.state == 'error'
          end
        end
      end
    end
  end
end
